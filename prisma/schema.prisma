// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())

  email     String  @unique
  name      String
  password  String?
  sessionId String? @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userTeams UserTeams[]
  message   Message[]
}

model Team {
  id Int @id @default(autoincrement())

  name         String  @unique
  openAiApiKey String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userTeams UserTeams[]
}

model UserTeams {
  id Int @id @default(autoincrement())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  role   Role   @default(MEMBER)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId Int
  team   Team?  @relation(fields: [teamId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  teamId Int?
  chats  Chat[]
}

model Chat {
  id Int @id @default(autoincrement())

  name        String?
  shared      Boolean @default(false)
  model       String  @default("gpt-3.5-turbo")
  temperature String  @default("0.6")
  roleContent String  @default("You are a helpful assistant.")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  messages Message[]

  owner   UserTeams @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownerId Int
}

model Message {
  id Int @id @default(autoincrement())

  question    String
  answer      String?
  model       String? // defaults to chat setting
  temperature String? // defaults to chat setting

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  chat   Chat @relation(fields: [chatId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  chatId Int

  author   User? @relation(fields: [authorId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  authorId Int?
}

enum Role {
  MEMBER
  ADMIN
}
