// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())

  email String @unique
  name  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userTeams        UserTeam[]
  messages         Message[]
  userSessions     UserSession[]
  LlmPersonalities LlmPersonality[]

  activeUserTeamId Int?      @unique
  activeUserTeam   UserTeam? @relation("ActiveUserTeam", fields: [activeUserTeamId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  sharedChats ChatUser[]

  password Password?
}

model Password {
  id Int @id @default(autoincrement())

  hash       String
  resetToken String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId Int  @unique
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model UserSession {
  id Int @id @default(autoincrement())

  sessionId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId Int
}

model Team {
  id Int @id @default(autoincrement())

  name         String  @unique
  openAiApiKey String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  teamUsers   UserTeam[]
  invitations Invitation[]
}

model UserTeam {
  id Int @id @default(autoincrement())

  role Role @default(MEMBER)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId Int

  team   Team @relation(fields: [teamId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  teamId Int

  chats Chat[]

  activatedBy User? @relation("ActiveUserTeam")

  @@unique([userId, teamId])
}

model Chat {
  id Int @id @default(autoincrement())

  name        String?
  shared      Boolean @default(false)
  model       String  @default("gpt-3.5-turbo")
  temperature String  @default("0.6")
  roleContent String  @default("You are a helpful assistant.")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  messages Message[]

  owner   UserTeam @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownerId Int

  sharedWith ChatUser[]
}

model Message {
  id Int @id @default(autoincrement())

  question    String
  answer      String?
  model       String? // defaults to chat setting
  temperature String? // defaults to chat setting

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  chat   Chat @relation(fields: [chatId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  chatId Int

  author   User @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId Int
}

model Invitation {
  id Int @id @default(autoincrement())

  hash String @unique

  createdAt DateTime @default(now())

  team   Team @relation(fields: [teamId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  teamId Int
}

model LlmPersonality {
  id Int @id @default(autoincrement())

  name    String
  context String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner   User @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownerId Int
}

enum Role {
  MEMBER
  ADMIN
  OWNER
}

model ChatUser {
  id Int @id @default(autoincrement())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId Int

  chat   Chat @relation(fields: [chatId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  chatId Int

  @@unique([userId, chatId])
}
